server {
    listen 80;
    server_name front-genta.xyz www.front-genta.xyz;

    # Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        # This path needs to correspond to where Certbot's webroot is pointed
        # In our docker-compose setup, certbot's /var/www/certbot is host's ./certbot/www
        # Nginx in this container needs access to that. We'll handle this by serving challenges directly
        # or by sharing the volume. For simplicity now, we make Nginx aware of the path
        # that Certbot will use *within this container* if it were also mapped here.
        # For the webroot plugin, Nginx itself needs to serve from the challenge directory.
        # We will mount the host's ./certbot/www to /var/www/certbot in this container too.
        root /var/www/certbot; # This Nginx will serve files from this path for challenges
        # allow all; # Default is allow
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name front-genta.xyz www.front-genta.xyz;

    # SSL Configuration - Certbot will manage these files
    ssl_certificate /etc/letsencrypt/live/front-genta.xyz/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/front-genta.xyz/privkey.pem;

    # Recommended SSL settings - these files are typically provided by Certbot or best practices
    # The include for options-ssl-nginx.conf and ssl_dhparams.pem will be generated by Certbot
    # into the /etc/letsencrypt/live/front-genta.xyz directory or /etc/letsencrypt/ directly.
    # For now, we assume they will be placed by certbot in a standard location that include will find.
    # Or, a common practice is for certbot to give you these lines to add.
    # We will mount the entire /etc/letsencrypt from certbot, so these should be available.
    include /etc/letsencrypt/options-ssl-nginx.conf; # Standard Let's Encrypt provided file
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;   # Standard Let's Encrypt provided file

    root /usr/share/nginx/html;
    index index.html index.htm;

    location / {
        try_files $uri $uri/ /index.html;
    }

    location ~* \.(?:css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|otf)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    location ~ /\. {
        deny all;
    }

    server_tokens off;
}
