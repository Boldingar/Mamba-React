name: Deploy to DigitalOcean Droplet

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache Docker layers
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: mamba-frontend:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Move the cache for next time
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Save Docker image
        run: |
          docker save mamba-frontend:latest > /tmp/mamba-frontend.tar
          ls -la /tmp/mamba-frontend.tar

      # Deploy to DigitalOcean
      - name: Upload configuration files to droplet
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: "docker-compose.yml,nginx.conf"
          target: "/root/mamba-frontend"
          # strip_components: 0 # Keep this for config files if needed

      # --- Start: Replace SCP Action with direct SCP via SSH Action --- 
      - name: Create SSH key file for SCP
        run: |
          echo "${{ secrets.DROPLET_SSH_KEY }}" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key

      - name: Upload Docker image via direct SCP
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }} # Key still needed for the ssh-action connection itself
          script: |
            # This script runs on the runner, executing scp to the target
            scp -i /tmp/deploy_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              /tmp/mamba-frontend.tar \
              ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_HOST }}:/tmp/mamba-frontend.tar
          
      - name: Remove SSH key file from runner
        if: always() # Ensure key is removed even if scp fails
        run: rm -f /tmp/deploy_key
      # --- End: Replace SCP Action --- 

      - name: Generate deployment ID
        id: deploy_id
        run: echo "DEPLOY_ID=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Deploy on droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          envs: DEPLOY_ID=${{ steps.deploy_id.outputs.DEPLOY_ID }}
          script: |
            echo "Starting deployment on droplet..."
            mkdir -p /root/mamba-frontend
            echo "Verifying uploaded tar file..."
            if [ ! -f /tmp/mamba-frontend.tar ]; then
              echo "ERROR: Docker image tar file not found at /tmp/mamba-frontend.tar!"
              ls -la /tmp/
              exit 1
            fi
            ls -la /tmp/mamba-frontend.tar
            # Stop and remove any containers using the mamba-frontend image or name pattern
            echo "Stopping and removing existing containers..."
            CONTAINER_IDS=$(docker ps -a -q --filter="name=mamba-frontend")
            if [ ! -z "$CONTAINER_IDS" ]; then
              docker stop $CONTAINER_IDS || true
              docker rm $CONTAINER_IDS || true
            else
              echo "No running containers found with name pattern mamba-frontend."
            fi

            # Remove the existing 'latest' image tag to prevent caching issues
            echo "Removing existing 'latest' Docker image tag..."
            docker rmi mamba-frontend:latest 2>/dev/null || true

            # Load the new Docker image from the tar file
            echo "Loading new Docker image..."
            docker load -i /tmp/mamba-frontend.tar # Use -i just to be safe
            # Verify image loaded successfully
            if ! docker images | grep -q mamba-frontend; then
              echo "ERROR: Failed to load Docker image from tar file!"
              exit 1
            fi
            echo "Image loaded successfully."

            # Deploy using docker-compose
            echo "Running docker-compose down..."
            cd /root/mamba-frontend
            export DEPLOY_ID="${DEPLOY_ID}"
            docker-compose down --remove-orphans -v --timeout 10 2>/dev/null || true

            echo "Running docker-compose up..."
            docker-compose up -d --force-recreate

            # Verify deployment
            echo "Verifying deployment..."
            docker ps | grep mamba-frontend

            # Clean up uploaded tar file
            echo "Cleaning up uploaded tar file..."
            rm -f /tmp/mamba-frontend.tar

            # Prune unused Docker images (optional, but good practice)
            echo "Pruning unused Docker images..."
            docker image prune -af

            echo "Deployment script finished." 