name: Deploy to DigitalOcean Droplet

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache Docker layers
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: mamba-frontend:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Move the cache for next time
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Save Docker image to Workspace
        run: |
          IMAGE_PATH="${GITHUB_WORKSPACE}/mamba-frontend.tar"
          echo "Saving Docker image to ${IMAGE_PATH}..."
          docker save -o "${IMAGE_PATH}" mamba-frontend:latest
          echo "Verifying saved file on runner..."
          ls -la "${IMAGE_PATH}"
          if [ ! -f "${IMAGE_PATH}" ]; then
            echo "ERROR: Failed to save Docker image to tar file on runner!"
            exit 1
          fi

      # Deploy to DigitalOcean
      - name: Upload configuration files to droplet
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: "docker-compose.yml,nginx.conf"
          target: "/root/mamba-frontend"

      # --- Revert to using appleboy/scp-action for image upload --- 
      - name: Upload Docker image to droplet using scp-action
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: "${{ github.workspace }}/mamba-frontend.tar" # Source file in workspace
          target: "/tmp/"                                   # Target directory on server
          # Keep it simple - no strip_components for single file

      - name: Generate deployment ID
        id: deploy_id
        run: echo "DEPLOY_ID=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Deploy on droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          envs: DEPLOY_ID=${{ steps.deploy_id.outputs.DEPLOY_ID }}
          script: |
            echo "Starting deployment on droplet..."
            mkdir -p /root/mamba-frontend
            
            # Verify the uploaded image file exists in /tmp/
            echo "Verifying uploaded tar file in /tmp/..."
            TARGET_TAR_PATH="/tmp/mamba-frontend.tar"
            if [ ! -f "${TARGET_TAR_PATH}" ]; then
              echo "ERROR: Docker image tar file not found at ${TARGET_TAR_PATH}! Listing /tmp/ contents..."
              ls -la /tmp/
              exit 1
            fi
            ls -la "${TARGET_TAR_PATH}"
            
            # Stop and remove existing containers
            echo "Stopping and removing existing containers..."
            CONTAINER_IDS=$(docker ps -a -q --filter="name=mamba-frontend")
            if [ ! -z "$CONTAINER_IDS" ]; then docker stop $CONTAINER_IDS || true; docker rm $CONTAINER_IDS || true; else echo "No containers found."; fi
            
            # Remove old image tag
            echo "Removing existing 'latest' Docker image tag..."
            docker rmi mamba-frontend:latest 2>/dev/null || true
            
            # Load the new image
            echo "Loading new Docker image from ${TARGET_TAR_PATH}..."
            docker load -i "${TARGET_TAR_PATH}"
            if ! docker images | grep -q mamba-frontend; then echo "ERROR: Failed to load Docker image!"; exit 1; fi
            echo "Image loaded successfully."
            
            # Deploy with Compose
            echo "Running docker-compose down..."
            cd /root/mamba-frontend
            export DEPLOY_ID="${DEPLOY_ID}"
            docker-compose down --remove-orphans -v --timeout 10 2>/dev/null || true
            echo "Running docker-compose up..."
            docker-compose up -d --force-recreate
            
            # Verify deployment
            echo "Verifying deployment..."
            docker ps | grep mamba-frontend
            
            # Cleanup
            echo "Cleaning up uploaded tar file..."
            rm -f "${TARGET_TAR_PATH}"
            echo "Pruning unused Docker images..."
            docker image prune -af
            echo "Deployment script finished."

      - name: Clean up workspace tar file
        if: always()
        run: rm -f "${{ github.workspace }}/mamba-frontend.tar" 