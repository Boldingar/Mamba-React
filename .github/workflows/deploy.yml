name: Deploy to DigitalOcean Droplet

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache Docker layers
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: mamba-frontend:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Move the cache for next time
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Save Docker image to Workspace
        run: |
          IMAGE_PATH="${GITHUB_WORKSPACE}/mamba-frontend.tar"
          echo "Saving Docker image to ${IMAGE_PATH}..."
          docker save -o "${IMAGE_PATH}" mamba-frontend:latest
          echo "Verifying saved file on runner..."
          ls -la "${IMAGE_PATH}"
          if [ ! -f "${IMAGE_PATH}" ]; then
            echo "ERROR: Failed to save Docker image to tar file on runner!"
            exit 1
          fi

      # Deploy to DigitalOcean
      - name: Upload configuration files to droplet
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: "docker-compose.yml,nginx.conf,options-ssl-nginx.conf"
          target: "/root/Mamba-React"

      - name: Generate deployment ID
        id: deploy_id
        run: echo "DEPLOY_ID=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      # --- Consolidated Save, Transfer, and Deploy Step ---
      - name: Save Image, Transfer, and Deploy
        env:
          DROPLET_SSH_KEY: ${{ secrets.DROPLET_SSH_KEY }}
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_USERNAME: ${{ secrets.DROPLET_USERNAME }}
          DEPLOY_ID: ${{ steps.deploy_id.outputs.DEPLOY_ID }}
        run: |
          # Define paths and options
          SSH_KEY_PATH="/tmp/deploy_key"
          LOCAL_IMAGE_PATH="${GITHUB_WORKSPACE}/mamba-frontend.tar"
          REMOTE_IMAGE_PATH="/root/mamba-frontend.tar"
          REMOTE_PROJECT_PATH="/root/Mamba-React"
          SSH_OPTIONS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

          # 1. Save image locally on runner
          echo "Saving Docker image to ${LOCAL_IMAGE_PATH}..."
          docker save -o "${LOCAL_IMAGE_PATH}" mamba-frontend:latest
          echo "Verifying saved file on runner..."
          ls -la "${LOCAL_IMAGE_PATH}"
          if [ ! -f "${LOCAL_IMAGE_PATH}" ]; then echo "ERROR: Failed to save image!" >&2; exit 1; fi

          # 2. Setup SSH Key
          echo "Setting up SSH key..."
          echo "${DROPLET_SSH_KEY}" > "${SSH_KEY_PATH}"
          chmod 600 "${SSH_KEY_PATH}"

          # 3. SCP image from runner to droplet (with verbose output)
          echo "Transferring image via SCP..."
          scp -v ${SSH_OPTIONS} \
            "${LOCAL_IMAGE_PATH}" \
            "${DROPLET_USERNAME}@${DROPLET_HOST}:${REMOTE_IMAGE_PATH}"
          if [ $? -ne 0 ]; then echo "ERROR: SCP failed!" >&2; exit 1; fi
          echo "SCP finished."

          # 4. Execute remote deployment commands via SSH (updated paths)
          echo "Executing remote deployment commands via SSH..."
          ssh ${SSH_OPTIONS} "${DROPLET_USERNAME}@${DROPLET_HOST}" " \
            echo '--- Starting deployment on droplet ---'; \
            mkdir -p ${REMOTE_PROJECT_PATH}; \
            cd ${REMOTE_PROJECT_PATH}; \
            echo 'Ensuring Git repository is clean and up to date...'; \
            git fetch origin; \
            git reset --hard origin/${GITHUB_REF_NAME:-main}; \
            echo 'Cleaning repository, excluding Certbot data...'; \
            git clean -fdx -e certbot/conf -e certbot/www; \
            echo 'Ensuring Certbot directories and necessary config files exist...'; \
            mkdir -p ./certbot/conf; \
            mkdir -p ./certbot/www; \
            echo 'Copying options-ssl-nginx.conf to certbot/conf directory...'; \
            if [ -f ./options-ssl-nginx.conf ]; then \
              cp ./options-ssl-nginx.conf ./certbot/conf/options-ssl-nginx.conf; \
              ls -la ./certbot/conf/options-ssl-nginx.conf; \
            else \
              echo 'WARNING: options-ssl-nginx.conf not found in project root. Ensure it is present in ./certbot/conf manually or via SCP.'; \
            fi; \
            echo 'Ensuring ssl-dhparams.pem exists in certbot/conf...'; \
            if [ ! -f ./certbot/conf/ssl-dhparams.pem ]; then \
              echo 'Generating ssl-dhparams.pem (this might take a few minutes)...'; \
              openssl dhparam -out ./certbot/conf/ssl-dhparams.pem 2048; \
            else \
              echo 'ssl-dhparams.pem already exists.'; \
            fi; \
            echo 'Verifying uploaded tar file at ${REMOTE_IMAGE_PATH}...'; \
            ls -la ${REMOTE_IMAGE_PATH}; \
            if [ ! -f ${REMOTE_IMAGE_PATH} ]; then echo 'ERROR: Tar file not found on droplet at ${REMOTE_IMAGE_PATH}!' >&2; exit 1; fi; \
            echo 'Stopping/Removing old containers...'; \
            docker ps -a --filter 'name=mamba-frontend' -q | xargs -r docker stop || true; \
            docker ps -a --filter 'name=mamba-frontend' -q | xargs -r docker rm || true; \
            docker ps -a --filter 'name=certbot' -q | xargs -r docker stop || true; \
            docker ps -a --filter 'name=certbot' -q | xargs -r docker rm || true; \
            echo 'Removing old image tag mamba-frontend:latest...'; \
            docker rmi mamba-frontend:latest 2>/dev/null || true; \
            echo 'Loading new image...'; \
            docker load -i ${REMOTE_IMAGE_PATH}; \
            if ! docker images | grep -q mamba-frontend; then echo 'ERROR: Failed to load image!' >&2; exit 1; fi; \
            echo 'Image loaded.'; \
            echo 'Running compose down (to remove old network if any)...'; \
            export DEPLOY_ID='${DEPLOY_ID}'; \
            docker-compose -f docker-compose.yml down --remove-orphans -v --timeout 10 2>/dev/null || true; \
            echo 'Running compose up for mamba-frontend...'; \
            docker-compose -f docker-compose.yml up --build -d mamba-frontend; \
            echo 'Running Certbot for renewal check...'; \
            docker-compose -f docker-compose.yml run --rm certbot; \
            echo 'Restarting mamba-frontend to pick up any renewed certs (if any)...'; \
            docker-compose -f docker-compose.yml restart mamba-frontend; \
            echo 'Verifying deployment...'; \
            docker ps -a | grep mamba-frontend; \
            echo 'Cleaning up tar file...'; \
            rm -f ${REMOTE_IMAGE_PATH}; \
            echo 'Pruning images...'; \
            docker image prune -af; \
            echo '--- Deployment on droplet finished ---'; \
          "
          if [ $? -ne 0 ]; then echo "ERROR: Remote SSH command execution failed!" >&2; exit 1; fi
          echo "SSH deployment command finished."

          # 5. Cleanup local key file (always run)
          echo "Cleaning up local SSH key..."
          rm -f "${SSH_KEY_PATH}"

      - name: Clean up workspace tar file
        if: always()
        run: rm -f "${{ github.workspace }}/mamba-frontend.tar" 