name: Deploy to DigitalOcean Droplet

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache Docker layers
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: mamba-frontend:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Move the cache for next time
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Save Docker image to Workspace
        run: |
          IMAGE_PATH="${GITHUB_WORKSPACE}/mamba-frontend.tar"
          echo "Saving Docker image to ${IMAGE_PATH}..."
          docker save -o "${IMAGE_PATH}" mamba-frontend:latest
          echo "Verifying saved file on runner..."
          ls -la "${IMAGE_PATH}"
          if [ ! -f "${IMAGE_PATH}" ]; then
            echo "ERROR: Failed to save Docker image to tar file on runner!"
            exit 1
          fi

      # Deploy to DigitalOcean
      - name: Upload configuration files to droplet
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: "docker-compose.yml,nginx.conf"
          target: "/root/mamba-frontend"

      - name: Create temporary SSH key file
        run: |
          echo "${{ secrets.DROPLET_SSH_KEY }}" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key

      - name: Generate deployment ID
        id: deploy_id
        run: echo "DEPLOY_ID=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Transfer Image and Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            # Define paths
            SSH_KEY_PATH="/tmp/deploy_key"
            LOCAL_IMAGE_PATH="${{ github.workspace }}/mamba-frontend.tar"
            REMOTE_USER="${{ secrets.DROPLET_USERNAME }}"
            REMOTE_HOST="${{ secrets.DROPLET_HOST }}"
            REMOTE_IMAGE_PATH="/tmp/mamba-frontend.tar"
            REMOTE_PROJECT_PATH="/root/Mamba-React"
            DEPLOY_ID="${{ steps.deploy_id.outputs.DEPLOY_ID }}"
            SSH_OPTIONS="-i ${SSH_KEY_PATH} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

            # 1. Verify local tar file exists on runner
            echo "Verifying local image file: ${LOCAL_IMAGE_PATH}"
            ls -la "${LOCAL_IMAGE_PATH}"
            if [ ! -f "${LOCAL_IMAGE_PATH}" ]; then echo "ERROR: Local image file not found!"; exit 1; fi

            # 2. SCP the image file from runner to droplet
            echo "Transferring image file via SCP..."
            scp ${SSH_OPTIONS} \
              "${LOCAL_IMAGE_PATH}" \
              ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_IMAGE_PATH}
            echo "SCP transfer finished."

            # 3. SSH into droplet and execute deployment commands
            echo "Connecting to droplet via SSH to perform deployment..."
            ssh ${SSH_OPTIONS} ${REMOTE_USER}@${REMOTE_HOST} " \
              echo '--- Starting deployment on droplet ---'; \
              mkdir -p ${REMOTE_PROJECT_PATH}; \
              echo 'Verifying uploaded tar file...'; \
              ls -la ${REMOTE_IMAGE_PATH}; \
              if [ ! -f ${REMOTE_IMAGE_PATH} ]; then echo 'ERROR: Tar file not found on droplet!'; exit 1; fi; \
              echo 'Stopping/Removing old containers...'; \
              docker stop $(docker ps -a -q --filter='name=mamba-frontend') 2>/dev/null || true; \
              docker rm $(docker ps -a -q --filter='name=mamba-frontend') 2>/dev/null || true; \
              echo 'Removing old image tag...'; \
              docker rmi mamba-frontend:latest 2>/dev/null || true; \
              echo 'Loading new image...'; \
              docker load -i ${REMOTE_IMAGE_PATH}; \
              if ! docker images | grep -q mamba-frontend; then echo 'ERROR: Failed to load image!'; exit 1; fi; \
              echo 'Image loaded.'; \
              echo 'Running compose down...'; \
              cd ${REMOTE_PROJECT_PATH}; \
              export DEPLOY_ID='${DEPLOY_ID}'; \
              docker-compose down --remove-orphans -v --timeout 10 2>/dev/null || true; \
              echo 'Running compose up...'; \
              docker-compose up -d --force-recreate; \
              echo 'Verifying deployment...'; \
              docker ps | grep mamba-frontend; \
              echo 'Cleaning up tar file...'; \
              rm -f ${REMOTE_IMAGE_PATH}; \
              echo 'Pruning images...'; \
              docker image prune -af; \
              echo '--- Deployment on droplet finished ---'; \
            "
            echo "SSH deployment command finished."

      - name: Remove temporary SSH key file
        if: always()
        run: rm -f /tmp/deploy_key

      - name: Clean up workspace tar file
        if: always()
        run: rm -f "${{ github.workspace }}/mamba-frontend.tar" 